@page "/login2"
@inject HttpClient  http
@inject NavigationManager navigation
@*@inject TokenAuthenticationProvider authStateProvider*@
@using System.Text
@using System.Text.Json


<div class="h-100 d-flex justify-content-center align-items-center">
    <BSContainer>
        <BSRow Class="h-100">
            <BSCol class="ml-auto mr-auto" LG="5" MD="7">
                <BSForm Model="@loginModel" Class="adx-form" UserValidation="true" @ref="loginForm" OnSubmit="DoLogin">
                    <BSCard Class="adx-card-login adx-card-white">
                        <BSCard CardType="BlazorStrap.CardType.Header">
                            <img alt="..." src="images/card-info.png" />
                            <BSCard CardType="BlazorStrap.CardType.Title">
                                Login
                            </BSCard>
                        </BSCard>
                        <BSCard CardType="BlazorStrap.CardType.Body">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">
                                        <RadzenIcon Icon="mail_outline" />
                                    </span>
                                </div>
                                <BSInput InputType="InputType.Text" Class="form-control" PlaceHolder="Username ou Email" @bind-Value="@loginModel.Login" />
                            </div>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">
                                        <RadzenIcon Icon="lock_open" />
                                    </span>
                                </div>
                                <BSInput InputType="InputType.Password" Class="form-control" PlaceHolder="Password" @bind-Value="@loginModel.Password" />
                            </div>
                        </BSCard>
                        <BSCard CardType="BlazorStrap.CardType.Footer">
                            <BSButton IsBlock="true" ButtonType="BlazorStrap.ButtonType.Submit" Class="mb-4" Color="BSColor.Primary" Size="Size.Large">
                                Entrar
                            </BSButton>
                            <div class="float-left">
                                <h6>
                                    <a class="link footer-link">
                                        Create Account
                                    </a>
                                </h6>
                            </div>
                            <div class="float-right">
                                <h6>
                                    <a class="link footer-link">
                                        Need Help?
                                    </a>
                                </h6>
                            </div>
                        </BSCard>
                    </BSCard>
                </BSForm>
            </BSCol>
        </BSRow>
    </BSContainer>
</div>

@code {
    BSForm<LoginModel> loginForm;
    LoginModel loginModel = new LoginModel();

    bool loginFalhou = false;
    string mensagem { get; set; }

    async Task DoLogin()
    {
        //mensagem = string.Empty;

        //try
        //{

        //    if (string.IsNullOrEmpty(loginModel.Login))
        //    {
        //        mensagem = "Informe o e-mail (ou o nome de usuário)";
        //    }

        //    if (string.IsNullOrEmpty(loginModel.Password))
        //    {
        //        if (string.IsNullOrEmpty(mensagem))
        //            mensagem += " e a senha!";
        //        else
        //            mensagem = "Informe a senha!";
        //    }

        //    if (string.IsNullOrWhiteSpace(loginModel.Login) || string.IsNullOrWhiteSpace(loginModel.Password))
        //    {
        //        mensagem = "Email ou Senha inválido(s)";
        //    }

        //    if (!string.IsNullOrEmpty(mensagem))
        //        return;

        //    var loginAsJson = JsonSerializer.Serialize(loginModel);

        //    var httpResponse = await http.PostAsync("api/account/login",
        //             new StringContent(loginAsJson, Encoding.UTF8, "application/json"));

        //    if (httpResponse.IsSuccessStatusCode)
        //    {
        //        var responseAsString = await httpResponse.Content.ReadAsStringAsync();

        //        var loginResult = JsonSerializer.Deserialize<UserToken>(responseAsString,
        //             new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        //        await authStateProvider.Login(loginResult.Token);
        //        navigation.NavigateTo($"{navigation.Uri.GetQueryParmValue("returnUrl")}");
        //    }
        //    else
        //    {
        //        loginFalhou = true;
        //        mensagem = $"Não foi possível realizar o Login do usuário.(Erro: {httpResponse.StatusCode})";
        //    }
        //}
        //catch (Exception)
        //{
        //    loginFalhou = true;
        //    mensagem = "Não foi possível realizar o Login do Usuário...";
        //}
    }
}

