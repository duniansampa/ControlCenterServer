@inherits LayoutComponentBase
@using System.Security.Claims
@inject NavigationManager navigation
@inject IJSRuntime js

<AuthorizeView>
    <Authorized>
        <RadzenDialog />
        <RadzenNotification />
        <CascadingValue Value="this">
            <div class="@PageCss">
                <div class="@SidebarCss">
                    <Sidebar @bind-SidebarMini="SidebarMini" />
                </div>
                <div class="@MainPanelCss">
                    <BSNavbar IsExpand="true" HideLight="true">
                        <div class="container-fluid">
                            <div class="adx-navbar-toggle-area">
                                <BSButton Class="btn-jus" Color="BSColor.Default" @onclick="ToggleSidebar">
                                    <i class="fas fa-bars @ToggleRegularCss"></i>
                                    <i class="fas fa-list-ul  @ToggleMiniCss"></i>
                                </BSButton>
                                <span class="adx-navbar-text">MEUS BOTS</span>
                            </div>
                            <MenuBar />
                        </div>
                    </BSNavbar>

                    <div class="adx-content">
                        @Body
                    </div>
                    <Footer IsFluid=@true />
                </div>
            </div>
        </CascadingValue>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex flex-row justify-content-center align-items-center">
            @Body
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private bool SidebarMini = false;
    private bool DarkMode = false;
    public static UserProfile UserProfile { get; private set; } = null;

    private string SideBarColor = "blue";

    private string ToggleRegularCss => new CssBuilder()
                                        .AddClass("d-none", when: SidebarMini)
                                        .AddClass("d-inline-block", when: !SidebarMini)
                                        .Build();

    private string ToggleMiniCss => new CssBuilder()
                                    .AddClass("d-none", when: !SidebarMini)
                                    .AddClass("d-inline-block", when: SidebarMini)
                                    .Build();

    private string SidebarCss => new CssBuilder("adx-sidebar")
                                .AddClass($"adx-sidebar-{SideBarColor}", when: !string.IsNullOrWhiteSpace(SideBarColor))
                                .Build();

    private string PageCss => new CssBuilder("adx-page")
                            .AddClass("adx-sidebar-mini", when: SidebarMini)
                            .Build();

    private string MainPanelCss => new CssBuilder("adx-main-panel")
                                .AddClass("adx-light-mode", when: !DarkMode)
                                .Build();

    private void ToggleSidebar() => SidebarMini = !SidebarMini;

    private void ToggleMode() => DarkMode = !DarkMode;

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //    if (UserProfile is null)
    //        UserProfile = await GetUserProfile();
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    var user = (await AuthStat).User;
    //    if (firstRender && user.Identity.IsAuthenticated)
    //        await js.InvokeVoidAsync("perfectScrollbarCreate", ".adx-main-panel");
    //}

    //public async Task<UserProfile> GetUserProfile(bool updated = false)
    //{
    //    var user = (await AuthStat).User;
    //    if ((UserProfile is null || updated) && user.Identity.IsAuthenticated)
    //    {
    //        var id = user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).First().Value;
    //        UserProfile = await http.GetFromJsonAsync<UserProfile>($"api/UserProfiles/{id}");
    //    }
    //    return UserProfile;
    //}
}
